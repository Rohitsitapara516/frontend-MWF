1: What is the DOM (Document Object Model) in JavaScript? How does JavaScript
interact with the DOM?

<...

The Document Object Model (DOM) is a programming interface provided by browsers that allows scripts to dynamically access and manipulate the content, structure, and style of a web document. The DOM represents the document as a tree of objects, where each node corresponds to a part of the document, such as elements, attributes, and text.

Key Features of the DOM:
Tree Structure: The DOM represents the document as a hierarchical tree structure. Each element in the HTML document is a node in this tree.

Node Types: The DOM defines several types of nodes, including:

Element nodes: Represent HTML elements (e.g., <div>, <p>, <a>).
Text nodes: Represent the text content within elements.
Attribute nodes: Represent the attributes of elements (e.g., class, id).
Dynamic Interaction: The DOM allows for dynamic changes to the document structure, enabling developers to add, remove, or modify elements and their attributes in real-time.

How JavaScript Interacts with the DOM:
JavaScript interacts with the DOM through the following methods:

Accessing Elements: JavaScript can access DOM elements using methods like:

document.getElementById(id): Accesses an element by its ID.
document.getElementsByClassName(className): Accesses elements by their class name.
document.querySelector(selector): Accesses the first element that matches a CSS selector.
Manipulating Elements: Once elements are accessed, JavaScript can manipulate them using properties and methods, such as:

Changing the content: element.innerHTML = "New Content";
Changing styles: element.style.color = "red";
Adding or removing classes: element.classList.add("new-class"); or element.classList.remove("old-class");
Creating and Removing Elements: JavaScript can create new elements and append them to the DOM:

javascript
const newElement = document.createElement("div");
newElement.innerHTML = "Hello, World!";
...
Event Handling: JavaScript can respond to user interactions by adding event listeners to DOM elements:

javascript
element.addEventListener("click", function)() 
alert("Element clicked!");
...
Traversing the DOM: JavaScript can navigate through the DOM tree using properties like parentNode, childNodes, nextSibling, and previousSibling.

